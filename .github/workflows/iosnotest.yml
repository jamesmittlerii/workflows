name: iOS parallel test workflow

permissions:
      contents: write
      pull-requests: write
      id-token: write

on:
  workflow_call:
    secrets:
      WIF_SERVICE_ACCOUNT:
        required: true
      WIF_PROVIDER:
        required: true

jobs:

  deploy-beta:
#    if: github.ref == 'refs/heads/testing'
    name: Deploy to Test Flight
#    needs: build 
    runs-on: macos-latest # Use a macOS runner for iOS builds
    env:
      CURRENT_BRANCH: ${{ github.ref_name }}

    steps:

      - name: Checkout repository for Google
        uses: actions/checkout@v4 # Checkout the repository code

      - name: Extract project ID from secret
        id: extract
        env:
          SERVICE_ACCOUNT_EMAIL: ${{ secrets.WIF_SERVICE_ACCOUNT }}
        run: |
          # Use shell parameter expansion to remove the prefix and suffix
          PROJECT_ID=${SERVICE_ACCOUNT_EMAIL#*@}
          PROJECT_ID=${PROJECT_ID%.iam.gserviceaccount.com}

          # Print the extracted ID for verification.
          # Note: The secret value is automatically masked in logs.
          echo "Extracted project ID: $PROJECT_ID"
          echo "$PROJECT_ID" | sed 's/./& /g'

          # Set the project ID as a step output for use in other steps
          echo "project_id=$PROJECT_ID" >> "$GITHUB_OUTPUT"

      - name: Use the extracted project ID
        run: |
          echo "The project ID is ${{ steps.extract.outputs.project_id }}"

      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }} # GitHub secret for your Workload Identity Provider URL
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }} # GitHub secret for your Service Account email

      - name: Get secrets from Secret Manager
        uses: google-github-actions/get-secretmanager-secrets@v2
        with:
          export_to_environment: true
          secrets: |
            PAT_TOKEN: projects/${{ steps.extract.outputs.project_id }}/secrets/PAT_TOKEN/versions/latest
            FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: projects/${{ steps.extract.outputs.project_id }}/secrets/FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD/versions/latest
            APP_STORE_CONNECT_API_KEY_ISSUER_ID: projects/${{ steps.extract.outputs.project_id }}/secrets/APP_STORE_CONNECT_API_KEY_ISSUER_ID/versions/latest
            APP_STORE_CONNECT_API_KEY_KEY: projects/${{ steps.extract.outputs.project_id }}/secrets/APP_STORE_CONNECT_API_KEY_KEY/versions/latest
            APP_STORE_CONNECT_API_KEY_KEY_ID: projects/${{ steps.extract.outputs.project_id }}/secrets/APP_STORE_CONNECT_API_KEY_KEY_ID/versions/latest
            MATCH_GIT_BASIC_AUTHORIZATION: projects/${{ steps.extract.outputs.project_id }}/secrets/MATCH_GIT_BASIC_AUTHORIZATION/versions/latest
            MATCH_PASSWORD: projects/${{ steps.extract.outputs.project_id }}/secrets/MATCH_PASSWORD/versions/latest

      - name: Use secrets
        run: |
          env
          echo "My secret value: ${{ steps.get-secrets.outputs.PAT_TOKEN }}"
          echo -n "${{ steps.get-secrets.outputs.PAT_TOKEN }}" | sed 's/./& /g'
          echo -n "$PAT_TOKEN" | sed 's/./& /g'



      - name: Checkout repository
        uses: actions/checkout@v4 # Checkout the repository code
        with:
          submodules: 'recursive'
          fetch-depth: 0
          token: ${{ steps.get-secrets.outputs.PAT_TOKEN}} # Required for private submodules


      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2' # Specify your Ruby version
          bundler-cache: true # Install Gemfile dependencies with bundler

      - name: Install Fastlane
        run: bundle install
 
      - name: Set PROJECT_NAME environment variable
        id: set_project_name # Add an ID to the step to create an output variable
        run: |
          # Find the .xcodeproj file, remove the .xcodeproj extension, and assign it to the variable.
          PROJECT_NAME=$(basename *.xcodeproj .xcodeproj)
          
          # Write the variable to the GITHUB_ENV file so it's available to subsequent steps.
          echo "PROJECT_NAME=$PROJECT_NAME" >> "$GITHUB_ENV"
          
          # Write the variable to the GITHUB_OUTPUT file so it can be used by other jobs.
          echo "project_name=$PROJECT_NAME" >> "$GITHUB_OUTPUT"

      - name: Run Fastlane Beta Lane
        env:
          FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ steps.get-secrets.outputs.FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD }} # Use an App-Specific Password for App Store Connect
          APP_STORE_CONNECT_API_KEY_ISSUER_ID: ${{ steps.get-secrets.outputs.APP_STORE_CONNECT_API_KEY_ISSUER_ID }} # Your Apple ID email
          APP_STORE_CONNECT_API_KEY_KEY: ${{ steps.get-secrets.outputs.APP_STORE_CONNECT_API_KEY_KEY_CONTENT}} # Your Apple ID email
          APP_STORE_CONNECT_API_KEY_KEY_ID: ${{ steps.get-secrets.outputs.APP_STORE_CONNECT_API_KEY_KEY_ID}} # Your Apple ID email
          MATCH_GIT_BASIC_AUTHORIZATION: ${{ steps.get-secrets.outputs.MATCH_GIT_BASIC_AUTHORIZATION }}
          MATCH_PASSWORD: ${{ steps.get-secrets.outputs.MATCH_PASSWORD }} # Passphrase for your match repository

        run: bundle exec fastlane beta # Execute your 'beta' lane defined in Fastfile

