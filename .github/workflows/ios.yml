name: iOS parallel test workflow

permissions:
      contents: write
      pull-requests: write

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "main" ]

jobs:

  deploy-beta:
#    if: github.ref == 'refs/heads/testing'
    name: Deploy to Test Flight
    needs: test 
    runs-on: macos-latest # Use a macOS runner for iOS builds
    env:
      CURRENT_BRANCH: ${{ github.ref_name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Checkout the repository code
        with:
          submodules: 'recursive'
          token: ${{ secrets.PAT_TOKEN }} # Required for private submodules


      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2' # Specify your Ruby version
          bundler-cache: true # Install Gemfile dependencies with bundler

      - name: Install Fastlane
        run: bundle install
 
      - name: Set PROJECT_NAME environment variable
        id: set_project_name # Add an ID to the step to create an output variable
        run: |
          # Find the .xcodeproj file, remove the .xcodeproj extension, and assign it to the variable.
          PROJECT_NAME=$(basename *.xcodeproj .xcodeproj)
          
          # Write the variable to the GITHUB_ENV file so it's available to subsequent steps.
          echo "PROJECT_NAME=$PROJECT_NAME" >> "$GITHUB_ENV"
          
          # Write the variable to the GITHUB_OUTPUT file so it can be used by other jobs.
          echo "project_name=$PROJECT_NAME" >> "$GITHUB_OUTPUT"

      - name: Run Fastlane Beta Lane
        env:
          FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD }} # Use an App-Specific Password for App Store Connect
          FASTLANE_APPLE_APPLICATION_ID:  ${{ secrets.FASTLANE_APPLE_APPLICATION_ID }}
          APP_STORE_CONNECT_API_KEY_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ISSUER_ID }} # Your Apple ID email
          APP_STORE_CONNECT_API_KEY_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY_KEY_CONTENT}} # Your Apple ID email
          APP_STORE_CONNECT_API_KEY_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_KEY_ID}} # Your Apple ID email
          MATCH_GIT_BASIC_AUTHORIZATION: ${{ secrets.MATCH_GIT_BASIC_AUTHORIZATION }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }} # Passphrase for your match repository
        run: bundle exec fastlane beta # Execute your 'beta' lane defined in Fastfile

  build:
    name: Build default scheme
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set Default Scheme
        id: set_scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo "scheme=$default" >> $GITHUB_OUTPUT
      - name: Import Apple Code Signing Certificates
        uses: apple-actions/import-codesign-certs@v3
        with:
          p12-file-base64: ${{ secrets.P12_BASE64_CERTIFICATE }}
          p12-password: ${{ secrets.P12_PASSWORD }}
      - name: Build for Testing
        env:
          scheme: ${{ steps.set_scheme.outputs.scheme }}
          platform: 'iOS Simulator'
        run: |
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild build-for-testing -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device" -derivedDataPath './DerivedData'
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: built-app
          path: DerivedData/Build/Products/
          retention-days: 1

  test:
#    if: false
    needs: build
    name: Test on ${{ matrix.device }}
    runs-on: macos-latest
#    timeout-minutes: 30
    strategy:
      matrix:
        #device: [ 'Any iOS Simulator Device' ]
        device: [ 'iPhone 16 Pro', 'iPad Pro 13-inch (M4)' ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set Default Scheme
        id: set_scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo "scheme=$default" >> $GITHUB_OUTPUT
      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: built-app
          path: DerivedData/Build/Products/
      - name: Display structure of downloaded files
        run: ls -R DerivedData/Build/Products/
      - name: Run Tests with Retry
        uses: nick-fields/retry@v3
        with:
           max_attempts: 3 # The maximum number of times to run the command
           timeout_minutes: 30 # How long to wait before timing out each attempt
           command: |
              scheme="${{ steps.set_scheme.outputs.scheme }}"
              platform="iOS Simulator"
              device_name="${{ matrix.device }}"
              if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then
                filetype_parameter="workspace"
                file_to_build="`ls -A | grep -i \\.xcworkspace\$`"
              else
                filetype_parameter="project"
                file_to_build="`ls -A | grep -i \\.xcodeproj\$`"
              fi
              file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
              xcodebuild test-without-building -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device_name" -derivedDataPath 'DerivedData'

#      - name: Run Tests
#        env:
#          scheme: ${{ steps.set_scheme.outputs.scheme }}
#          platform: 'iOS Simulator'
#          device_name: ${{ matrix.device }}
#        run: |
#          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
#          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
#          xcodebuild test-without-building -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device_name" -derivedDataPath 'DerivedData'
