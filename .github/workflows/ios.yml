name: iOS parallel test workflow

permissions:
      contents: write
      pull-requests: write
      id-token: write

on:
  workflow_call:
    secrets:
      WIF_SERVICE_ACCOUNT:
        required: true
      WIF_PROVIDER:
        required: true
      PAT_TOKEN:
        required: true

jobs:

  deploy-beta:
#    if: github.ref == 'refs/heads/testing'
    name: Deploy to Test Flight
    needs: test
    runs-on: macos-latest # Use a macOS runner for iOS builds
    env:
      CURRENT_BRANCH: ${{ github.ref_name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Checkout the repository code
        with:
          submodules: 'recursive'
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN }} # Required for private submodules
    
      - name: Extract project ID from secret
        id: extract
        env:
          SERVICE_ACCOUNT_EMAIL: ${{ secrets.WIF_SERVICE_ACCOUNT }}
        run: |
          # Use shell parameter expansion to remove the prefix and suffix
          PROJECT_ID=${SERVICE_ACCOUNT_EMAIL#*@}
          PROJECT_ID=${PROJECT_ID%.iam.gserviceaccount.com}

          # Print the extracted ID for verification.
          # Note: The secret value is automatically masked in logs.
          echo "Extracted project ID: $PROJECT_ID"
          echo "$PROJECT_ID" | sed 's/./& /g'

          # Set the project ID as a step output for use in other steps
          echo "project_id=$PROJECT_ID" >> "$GITHUB_OUTPUT"

      - name: Use the extracted project ID
        run: |
          echo "The project ID is ${{ steps.extract.outputs.project_id }}"

      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }} # GitHub secret for your Workload Identity Provider URL
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }} # GitHub secret for your Service Account email

      - name: Get secrets from Secret Manager
        uses: google-github-actions/get-secretmanager-secrets@v2
        with:
          export_to_environment: true
          secrets: |
            FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: projects/${{ steps.extract.outputs.project_id }}/secrets/FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD/versions/latest
            APP_STORE_CONNECT_API_KEY_ISSUER_ID: projects/${{ steps.extract.outputs.project_id }}/secrets/APP_STORE_CONNECT_API_KEY_ISSUER_ID/versions/latest
            APP_STORE_CONNECT_API_KEY_KEY: projects/${{ steps.extract.outputs.project_id }}/secrets/APP_STORE_CONNECT_API_KEY_KEY/versions/latest
            APP_STORE_CONNECT_API_KEY_KEY_ID: projects/${{ steps.extract.outputs.project_id }}/secrets/APP_STORE_CONNECT_API_KEY_KEY_ID/versions/latest
            MATCH_GIT_BASIC_AUTHORIZATION: projects/${{ steps.extract.outputs.project_id }}/secrets/MATCH_GIT_BASIC_AUTHORIZATION/versions/latest
            MATCH_PASSWORD: projects/${{ steps.extract.outputs.project_id }}/secrets/MATCH_PASSWORD/versions/latest



      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2' # Specify your Ruby version
          bundler-cache: true # Install Gemfile dependencies with bundler

      - name: Install Fastlane
        run: bundle install
 
      - name: Set PROJECT_NAME environment variable
        id: set_project_name # Add an ID to the step to create an output variable
        run: |
          # Find the .xcodeproj file, remove the .xcodeproj extension, and assign it to the variable.
          PROJECT_NAME=$(basename *.xcodeproj .xcodeproj)
          
          # Write the variable to the GITHUB_ENV file so it's available to subsequent steps.
          echo "PROJECT_NAME=$PROJECT_NAME" >> "$GITHUB_ENV"
          
          # Write the variable to the GITHUB_OUTPUT file so it can be used by other jobs.
          echo "project_name=$PROJECT_NAME" >> "$GITHUB_OUTPUT"

      - name: Run Fastlane Beta Lane
        run: bundle exec fastlane beta # Execute your 'beta' lane defined in Fastfile

  build:
    name: Build default scheme
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set Default Scheme
        id: set_scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo "scheme=$default" >> $GITHUB_OUTPUT
#      - name: Import Apple Code Signing Certificates
#        uses: apple-actions/import-codesign-certs@v3
#        with:
#          p12-file-base64: ${{ secrets.P12_BASE64_CERTIFICATE }}
#          p12-password: ${{ secrets.P12_PASSWORD }}
      - name: Build for Testing
        env:
          scheme: ${{ steps.set_scheme.outputs.scheme }}
          platform: 'iOS Simulator'
        run: |
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild build-for-testing -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device" -derivedDataPath './DerivedData'
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: built-app
          path: DerivedData/Build/Products/
          retention-days: 1

  test:
#    if: false
    needs: build
    name: Test on ${{ matrix.device }}
    runs-on: macos-latest
#    timeout-minutes: 30
    strategy:
      matrix:
        #device: [ 'Any iOS Simulator Device' ]
        device: [ 'iPhone 16 Pro', 'iPad Pro 13-inch (M4)' ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set Default Scheme
        id: set_scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo "scheme=$default" >> $GITHUB_OUTPUT
      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: built-app
          path: DerivedData/Build/Products/
      - name: Display structure of downloaded files
        run: ls -R DerivedData/Build/Products/
      - name: Run Tests with Retry
        uses: nick-fields/retry@v3
        with:
           max_attempts: 3 # The maximum number of times to run the command
           timeout_minutes: 30 # How long to wait before timing out each attempt
           command: |
              scheme="${{ steps.set_scheme.outputs.scheme }}"
              platform="iOS Simulator"
              device_name="${{ matrix.device }}"
              if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then
                filetype_parameter="workspace"
                file_to_build="`ls -A | grep -i \\.xcworkspace\$`"
              else
                filetype_parameter="project"
                file_to_build="`ls -A | grep -i \\.xcodeproj\$`"
              fi
              file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
              xcodebuild test-without-building -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device_name" -derivedDataPath 'DerivedData'

